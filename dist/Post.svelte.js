import './Post.svelte.css.proxy.js';
/* src/Post.svelte generated by Svelte v3.32.3 */
import {
	HtmlTag,
	SvelteComponent,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import { BlogService } from "./services/blog-service.js";

function create_else_block(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(/*html*/ ctx[0], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*html*/ 1) html_tag.p(/*html*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (31:2) {#if error !== null}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*error*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*error*/ 2) set_data(t, /*error*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*error*/ ctx[1] !== null) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "post-page-wrapper svelte-1mjpdxd");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const blogService = new BlogService();
	let { id } = $$props;
	let html = null;
	let error = null;

	onMount(async () => {
		blogService.getPost(id).then(res => {
			$$invalidate(0, html = res);
		}).catch(err => {
			$$invalidate(1, error = err);
		});
	});

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
	};

	return [html, error, id];
}

class Post extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 2 });
	}
}

export default Post;