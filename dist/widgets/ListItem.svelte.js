import './ListItem.svelte.css.proxy.js';
/* src/widgets/ListItem.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

import { link, useResolve } from "../../_snowpack/pkg/svelte-navigator.js";

function create_fragment(ctx) {
	let div;
	let a;
	let h2;
	let t;
	let link_action;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			a = element("a");
			h2 = element("h2");
			t = text(/*name*/ ctx[0]);
			attr(h2, "class", "card-title svelte-1ec0fco");
			attr(a, "href", /*resolvedLink*/ ctx[1]);
			attr(div, "class", "card svelte-1ec0fco");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, h2);
			append(h2, t);

			if (!mounted) {
				dispose = action_destroyer(link_action = link.call(null, a));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const resolve = useResolve();
	let { name } = $$props;
	const resolvedLink = resolve(`posts/${name}`);

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, resolvedLink];
}

class ListItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });
	}
}

export default ListItem;