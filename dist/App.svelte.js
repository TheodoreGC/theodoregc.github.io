import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { Router, Link, Route } from "../_snowpack/pkg/svelte-navigator.js";

// Layout elements
import Navigation from "./layout/Navigation.svelte.js";

import Main from "./layout/Main.svelte.js";
import Footer from "./layout/Footer.svelte.js";

// Pages
import Home from "./Home.svelte.js";

import About from "./About.svelte.js";
import Blog from "./Blog.svelte.js";
import Post from "./Post.svelte.js";

function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("Home");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (34:6) <Link to='about' class='website-navigation-link'>
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("About");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (35:6) <Link to='blog' class='website-navigation-link'>
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("Blog");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (29:2) <Navigation>
function create_default_slot_3(ctx) {
	let div0;
	let link0;
	let t0;
	let div1;
	let link1;
	let t1;
	let link2;
	let current;

	link0 = new Link({
			props: {
				to: "/",
				class: "website-navigation-link",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	link1 = new Link({
			props: {
				to: "about",
				class: "website-navigation-link",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	link2 = new Link({
			props: {
				to: "blog",
				class: "website-navigation-link",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div0 = element("div");
			create_component(link0.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(link1.$$.fragment);
			t1 = text(" |\n      ");
			create_component(link2.$$.fragment);
			attr(div0, "class", "website-navigation-home svelte-11x3vxl");
			attr(div1, "class", "website-navigation-pages svelte-11x3vxl");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			mount_component(link0, div0, null);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			mount_component(link1, div1, null);
			append(div1, t1);
			mount_component(link2, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const link0_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link2_changes = {};

			if (dirty & /*$$scope*/ 2) {
				link2_changes.$$scope = { dirty, ctx };
			}

			link2.$set(link2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_component(link0);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			destroy_component(link1);
			destroy_component(link2);
		}
	};
}

// (42:4) <Route path='/blog/posts/:id' let:params>
function create_default_slot_2(ctx) {
	let post;
	let current;
	post = new Post({ props: { id: /*params*/ ctx[0].id } });

	return {
		c() {
			create_component(post.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_changes = {};
			if (dirty & /*params*/ 1) post_changes.id = /*params*/ ctx[0].id;
			post.$set(post_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post, detaching);
		}
	};
}

// (38:2) <Main>
function create_default_slot_1(ctx) {
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let t2;
	let route3;
	let t3;
	let footer;
	let current;
	route0 = new Route({ props: { path: "/", component: Home } });

	route1 = new Route({
			props: { path: "/about", component: About }
		});

	route2 = new Route({
			props: { path: "/blog", component: Blog }
		});

	route3 = new Route({
			props: {
				path: "/blog/posts/:id",
				$$slots: {
					default: [
						create_default_slot_2,
						({ params }) => ({ 0: params }),
						({ params }) => params ? 1 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	footer = new Footer({});

	return {
		c() {
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
			t2 = space();
			create_component(route3.$$.fragment);
			t3 = space();
			create_component(footer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t0, anchor);
			mount_component(route1, target, anchor);
			insert(target, t1, anchor);
			mount_component(route2, target, anchor);
			insert(target, t2, anchor);
			mount_component(route3, target, anchor);
			insert(target, t3, anchor);
			mount_component(footer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route3_changes = {};

			if (dirty & /*$$scope, params*/ 3) {
				route3_changes.$$scope = { dirty, ctx };
			}

			route3.$set(route3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			transition_in(route3.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			transition_out(route3.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t0);
			destroy_component(route1, detaching);
			if (detaching) detach(t1);
			destroy_component(route2, detaching);
			if (detaching) detach(t2);
			destroy_component(route3, detaching);
			if (detaching) detach(t3);
			destroy_component(footer, detaching);
		}
	};
}

// (28:0) <Router>
function create_default_slot(ctx) {
	let navigation;
	let t;
	let main;
	let current;

	navigation = new Navigation({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	main = new Main({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(navigation.$$.fragment);
			t = space();
			create_component(main.$$.fragment);
		},
		m(target, anchor) {
			mount_component(navigation, target, anchor);
			insert(target, t, anchor);
			mount_component(main, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navigation_changes = {};

			if (dirty & /*$$scope*/ 2) {
				navigation_changes.$$scope = { dirty, ctx };
			}

			navigation.$set(navigation_changes);
			const main_changes = {};

			if (dirty & /*$$scope*/ 2) {
				main_changes.$$scope = { dirty, ctx };
			}

			main.$set(main_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			transition_in(main.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navigation.$$.fragment, local);
			transition_out(main.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navigation, detaching);
			if (detaching) detach(t);
			destroy_component(main, detaching);
		}
	};
}

function create_fragment(ctx) {
	let router;
	let current;

	router = new Router({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const router_changes = {};

			if (dirty & /*$$scope*/ 2) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default App;