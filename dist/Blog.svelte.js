import './Blog.svelte.css.proxy.js';
/* src/Blog.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	assign,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import { BlogService } from "./services/blog-service.js";
import List from "./widgets/List.svelte.js";
import ListItem from "./widgets/ListItem.svelte.js";

function create_default_slot(ctx) {
	let listitem;
	let current;
	const listitem_spread_levels = [/*item*/ ctx[10]];
	let listitem_props = {};

	for (let i = 0; i < listitem_spread_levels.length; i += 1) {
		listitem_props = assign(listitem_props, listitem_spread_levels[i]);
	}

	listitem = new ListItem({ props: listitem_props });

	return {
		c() {
			create_component(listitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listitem_changes = (dirty & /*item*/ 1024)
			? get_spread_update(listitem_spread_levels, [get_spread_object(/*item*/ ctx[10])])
			: {};

			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listitem, detaching);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let input;
	let t2;
	let div1;
	let list;
	let updating_start;
	let updating_end;
	let t3;
	let div0;
	let p0;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let p1;
	let t9;
	let t10;
	let current;
	let mounted;
	let dispose;

	function list_start_binding(value) {
		/*list_start_binding*/ ctx[7](value);
	}

	function list_end_binding(value) {
		/*list_end_binding*/ ctx[8](value);
	}

	let list_props = {
		items: /*filteredList*/ ctx[4],
		$$slots: {
			default: [
				create_default_slot,
				({ item }) => ({ 10: item }),
				({ item }) => item ? 1024 : 0
			]
		},
		$$scope: { ctx }
	};

	if (/*start*/ ctx[2] !== void 0) {
		list_props.start = /*start*/ ctx[2];
	}

	if (/*end*/ ctx[3] !== void 0) {
		list_props.end = /*end*/ ctx[3];
	}

	list = new List({ props: list_props });
	binding_callbacks.push(() => bind(list, "start", list_start_binding));
	binding_callbacks.push(() => bind(list, "end", list_end_binding));

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Posts";
			t1 = space();
			input = element("input");
			t2 = space();
			div1 = element("div");
			create_component(list.$$.fragment);
			t3 = space();
			div0 = element("div");
			p0 = element("p");
			t4 = text("showing items ");
			t5 = text(/*start*/ ctx[2]);
			t6 = text("-");
			t7 = text(/*end*/ ctx[3]);
			t8 = space();
			p1 = element("p");
			t9 = text("Total posts: ");
			t10 = text(/*totalCount*/ ctx[1]);
			attr(h1, "class", "svelte-3xego9");
			attr(input, "placeholder", "Search");
			attr(input, "class", "blog-list-search-box svelte-3xego9");
			attr(p0, "class", "svelte-3xego9");
			attr(p1, "class", "svelte-3xego9");
			attr(div0, "class", "blog-list-information svelte-3xego9");
			attr(div1, "class", "container svelte-3xego9");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*searchTerm*/ ctx[0]);
			insert(target, t2, anchor);
			insert(target, div1, anchor);
			mount_component(list, div1, null);
			append(div1, t3);
			append(div1, div0);
			append(div0, p0);
			append(p0, t4);
			append(p0, t5);
			append(p0, t6);
			append(p0, t7);
			append(div0, t8);
			append(div0, p1);
			append(p1, t9);
			append(p1, t10);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*searchTerm*/ 1 && input.value !== /*searchTerm*/ ctx[0]) {
				set_input_value(input, /*searchTerm*/ ctx[0]);
			}

			const list_changes = {};
			if (dirty & /*filteredList*/ 16) list_changes.items = /*filteredList*/ ctx[4];

			if (dirty & /*$$scope, item*/ 3072) {
				list_changes.$$scope = { dirty, ctx };
			}

			if (!updating_start && dirty & /*start*/ 4) {
				updating_start = true;
				list_changes.start = /*start*/ ctx[2];
				add_flush_callback(() => updating_start = false);
			}

			if (!updating_end && dirty & /*end*/ 8) {
				updating_end = true;
				list_changes.end = /*end*/ ctx[3];
				add_flush_callback(() => updating_end = false);
			}

			list.$set(list_changes);
			if (!current || dirty & /*start*/ 4) set_data(t5, /*start*/ ctx[2]);
			if (!current || dirty & /*end*/ 8) set_data(t7, /*end*/ ctx[3]);
			if (!current || dirty & /*totalCount*/ 2) set_data(t10, /*totalCount*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(input);
			if (detaching) detach(t2);
			if (detaching) detach(div1);
			destroy_component(list);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let filteredList;
	const blogService = new BlogService();
	let items = [];
	let totalCount = 0;
	let searchTerm = "";
	let start;
	let end;

	onMount(async () => {
		blogService.getAllPosts().then(({ posts, count }) => {
			$$invalidate(5, items = posts);
			$$invalidate(1, totalCount = count);
		});
	});

	function input_input_handler() {
		searchTerm = this.value;
		$$invalidate(0, searchTerm);
	}

	function list_start_binding(value) {
		start = value;
		$$invalidate(2, start);
	}

	function list_end_binding(value) {
		end = value;
		$$invalidate(3, end);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items, searchTerm*/ 33) {
			$: $$invalidate(4, filteredList = items.filter(item => item.name.indexOf(searchTerm) !== -1));
		}
	};

	return [
		searchTerm,
		totalCount,
		start,
		end,
		filteredList,
		items,
		input_input_handler,
		list_start_binding,
		list_end_binding
	];
}

class Blog extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Blog;