import './Blog.svelte.css.proxy.js';
/* src/Blog.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	action_destroyer,
	add_flush_callback,
	append,
	assign,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	handle_promise,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { useFocus } from "../_snowpack/pkg/svelte-navigator.js";
import { BlogService } from "./services/blog-service.js";
import List from "./widgets/List.svelte.js";
import ListItem from "./widgets/ListItem.svelte.js";

function get_then_context(ctx) {
	ctx[10] = ctx[12].posts;
	ctx[11] = ctx[12].count;
}

// (1:0) <script>   import { useFocus }
function create_catch_block(ctx) {
	return {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
}

// (64:2) {:then { posts, count }}
function create_then_block(ctx) {
	get_then_context(ctx);
	let list;
	let updating_start;
	let updating_end;
	let t0;
	let div;
	let p0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7_value = /*count*/ ctx[11] + "";
	let t7;
	let current;

	function list_start_binding(value) {
		/*list_start_binding*/ ctx[7](value);
	}

	function list_end_binding(value) {
		/*list_end_binding*/ ctx[8](value);
	}

	let list_props = {
		items: /*posts*/ ctx[10].filter(/*func*/ ctx[6]),
		$$slots: {
			default: [
				create_default_slot,
				({ item }) => ({ 13: item }),
				({ item }) => item ? 8192 : 0
			]
		},
		$$scope: { ctx }
	};

	if (/*start*/ ctx[1] !== void 0) {
		list_props.start = /*start*/ ctx[1];
	}

	if (/*end*/ ctx[2] !== void 0) {
		list_props.end = /*end*/ ctx[2];
	}

	list = new List({ props: list_props });
	binding_callbacks.push(() => bind(list, "start", list_start_binding));
	binding_callbacks.push(() => bind(list, "end", list_end_binding));

	return {
		c() {
			create_component(list.$$.fragment);
			t0 = space();
			div = element("div");
			p0 = element("p");
			t1 = text("showing items ");
			t2 = text(/*start*/ ctx[1]);
			t3 = text("-");
			t4 = text(/*end*/ ctx[2]);
			t5 = space();
			p1 = element("p");
			t6 = text("Total posts: ");
			t7 = text(t7_value);
			attr(p0, "class", "svelte-zwvxy3");
			attr(p1, "class", "svelte-zwvxy3");
			attr(div, "class", "blog-list-information svelte-zwvxy3");
		},
		m(target, anchor) {
			mount_component(list, target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, p0);
			append(p0, t1);
			append(p0, t2);
			append(p0, t3);
			append(p0, t4);
			append(div, t5);
			append(div, p1);
			append(p1, t6);
			append(p1, t7);
			current = true;
		},
		p(ctx, dirty) {
			get_then_context(ctx);
			const list_changes = {};
			if (dirty & /*searchTerm*/ 1) list_changes.items = /*posts*/ ctx[10].filter(/*func*/ ctx[6]);

			if (dirty & /*$$scope, item*/ 24576) {
				list_changes.$$scope = { dirty, ctx };
			}

			if (!updating_start && dirty & /*start*/ 2) {
				updating_start = true;
				list_changes.start = /*start*/ ctx[1];
				add_flush_callback(() => updating_start = false);
			}

			if (!updating_end && dirty & /*end*/ 4) {
				updating_end = true;
				list_changes.end = /*end*/ ctx[2];
				add_flush_callback(() => updating_end = false);
			}

			list.$set(list_changes);
			if (!current || dirty & /*start*/ 2) set_data(t2, /*start*/ ctx[1]);
			if (!current || dirty & /*end*/ 4) set_data(t4, /*end*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(list, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
		}
	};
}

// (65:4) <List items={posts.filter(post => post.name.indexOf(searchTerm) !== -1)} bind:start bind:end let:item>
function create_default_slot(ctx) {
	let listitem;
	let current;
	const listitem_spread_levels = [/*item*/ ctx[13]];
	let listitem_props = {};

	for (let i = 0; i < listitem_spread_levels.length; i += 1) {
		listitem_props = assign(listitem_props, listitem_spread_levels[i]);
	}

	listitem = new ListItem({ props: listitem_props });

	return {
		c() {
			create_component(listitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listitem_changes = (dirty & /*item*/ 8192)
			? get_spread_update(listitem_spread_levels, [get_spread_object(/*item*/ ctx[13])])
			: {};

			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listitem, detaching);
		}
	};
}

// (62:26)      <h1 class="blog-list-hidden" use:registerFocus>The blog posts are being loaded...</h1>   {:then { posts, count }}
function create_pending_block(ctx) {
	let h1;
	let registerFocus_action;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "The blog posts are being loaded...";
			attr(h1, "class", "blog-list-hidden svelte-zwvxy3");
		},
		m(target, anchor) {
			insert(target, h1, anchor);

			if (!mounted) {
				dispose = action_destroyer(registerFocus_action = /*registerFocus*/ ctx[3].call(null, h1));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let input;
	let t2;
	let div;
	let promise;
	let current;
	let mounted;
	let dispose;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 12,
		blocks: [,,,]
	};

	handle_promise(promise = /*blogPostRequest*/ ctx[4], info);

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Posts";
			t1 = space();
			input = element("input");
			t2 = space();
			div = element("div");
			info.block.c();
			attr(h1, "class", "svelte-zwvxy3");
			attr(input, "placeholder", "Search");
			attr(input, "class", "blog-list-search-box svelte-zwvxy3");
			attr(div, "class", "container svelte-zwvxy3");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*searchTerm*/ ctx[0]);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			info.block.m(div, info.anchor = null);
			info.mount = () => div;
			info.anchor = null;
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*searchTerm*/ 1 && input.value !== /*searchTerm*/ ctx[0]) {
				set_input_value(input, /*searchTerm*/ ctx[0]);
			}

			{
				const child_ctx = ctx.slice();
				child_ctx[12] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(input);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			info.block.d();
			info.token = null;
			info = null;
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const registerFocus = useFocus();
	const blogService = new BlogService();
	let searchTerm = "";
	let start;
	let end;
	const blogPostRequest = blogService.getAllPosts();

	function input_input_handler() {
		searchTerm = this.value;
		$$invalidate(0, searchTerm);
	}

	const func = post => post.name.indexOf(searchTerm) !== -1;

	function list_start_binding(value) {
		start = value;
		$$invalidate(1, start);
	}

	function list_end_binding(value) {
		end = value;
		$$invalidate(2, end);
	}

	return [
		searchTerm,
		start,
		end,
		registerFocus,
		blogPostRequest,
		input_input_handler,
		func,
		list_start_binding,
		list_end_binding
	];
}

class Blog extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Blog;